import pickle
import hashlib
import base64

class Address:
    config_str = '{{"{ip}", {port}}}'

    def __init__(self, port, ip='127.0.0.1'):
        self.ip = ip
        self.port = port

    @property
    def as_config(self):
        return self.config_str.format(ip=self.ip, port=self.port)

create_key = lambda n:hashlib.sha256(str(n).encode('ascii')).digest()[:6]
to_base64 = lambda b:base64.b64encode(b)

class Node:
    config_str = '{{node_config, <<"{myid}">>, {address}, [{init_peers}]}}'
    def __init__(self, address, node_num, init_peers=None):
        if init_peers is None:
            init_peers = []
        self.init_peers = init_peers
        self.node_num = node_num
        self.myid_bin = create_key(node_num)
        self.myid_b64 = to_base64(self.myid_bin)
        self.address = address

    def __hash__(self):
        return self.myid_bin
 
    @property
    def as_config(self):
        init_peers = ', '.join([address.as_config for address in self.init_peers])
        return self.config_str.format(
            myid=self.myid_b64.decode('utf-8'), address=self.address.as_config,
            init_peers=init_peers)

class NodeConfig:
    config_head = """
%% This config have been generated by test.py
[
  {{p2phun, [
      {{json_api_config, {json_api}}},
      {{nodes, [
"""
    config_tail = """
    ]}
  ]},
  {lager, [
    {log_root, "/home/borgtu/p2phun"},
    {handlers, [
      {lager_console_backend, info},
      %{lager_file_backend, [{file, "error.log"}, {level, error}]},
      {lager_file_backend, [{file, "console.log"}, {level, info}]}
    ]}
  ]}
]."""

    def __init__(self, nodes, json_api=None):
        self.nodes = nodes
        self.json_api = json_api

    def __repr__(self):
        nodes = ',\n'.join([node.as_config for node in self.nodes])
        config_head = self.config_head.format(json_api=self.json_api.as_config)
        return config_head + nodes + self.config_tail

if __name__ == '__main__':
    number_of_nodes = 3
    node_numbers = range(2, number_of_nodes + 1)
    nodes= [Node(Address(5000 + n), n, init_peers=[Address(5000 + (n - 1))]) for n in node_numbers]
    nodes.append(Node(Address(5001), 1, init_peers=[]))
    nodecfg = NodeConfig(nodes, json_api=Address(4999))
    with open('nodes.pickle', 'wb') as f: pickle.dump(nodes, f)
    print(nodecfg)
    with open('p2phun_test.config', 'w')as f:
